$theme-colors: (
    default: rgb(57, 131, 125),
    default-light: rgb(233, 245, 245),

    font: rgb(255, 255, 255),
    hover: rgb(233, 246, 245),

    disabled-1: rgb(68, 68, 68),
    disabled-2: rgb(92, 92, 92),
    disabled-3: rgb(225, 225, 225),
    disabled-bg: rgb(246, 246, 246),

    error: rgb(218, 103, 107),
    error-bg: rgb(247, 236, 236),
    background: rgba(220, 226, 222, 0.6),
    background-alt: rgba(220, 226, 222, 0.4),


    test-color: rgb(255, 213, 0)
);


@mixin focus-outline {
    outline: 1px solid map-get($theme-colors, default);
    outline-offset: 2px;
}


html>* {
    font-family: system-ui,
        -apple-system,
        BlinkMacSystemFont,
        'Segoe UI',
        Roboto,
        Oxygen,
        Ubuntu,
        Cantarell,
        'Open Sans',
        'Helvetica Neue',
        sans-serif;
}

.content {
    min-width: 42em;
    margin: 3em;
    padding: 5em 2em;
    background-color: map-get($theme-colors, background);
    overflow: hidden;

}

@mixin hover--default {
    background-color: map-get($theme-colors, font);
    color: map-get($theme-colors, default);
    outline: map-get($theme-colors, default) solid 1px;
}

.button-basic-group {
    display: flex;
    justify-content: left;


    .button--basic {
        display: grid;
        place-items: center;
        gap: 1em;
        margin-right: 3em;

    }

    .button {
        box-sizing: border-box;
        background-color: map-get($theme-colors, default);
        color: map-get($theme-colors, font);
        font-weight: 600;
        border: none;

        cursor: pointer;
        font-size: .75em;
        transition: background-color 0.1s ease;

        // basic1 button style
        &.button--basic1,
        &.button--basic1--disabled {
            border-radius: 3px;
            padding: .75rem 2rem;
        }

        // secondary button style
        &.button--basic2 {
            width: 40px;
            height: 40px;
            border-radius: 50%;
        }


        &.button--basic1--disabled {
            .arrow {
                visibility: visible;
                color: currentColor;
            }
        }

        //status

        &:hover {
            @include hover--default;

            .arrow {
                visibility: visible;
                color: currentColor;
            }
        }

        &:focus {
            @include focus-outline;

            .arrow {
                visibility: visible;
                color: currentColor;
            }
        }


        &:focus:hover {
            background-color: map-get($theme-colors, hover);
            color: map-get($theme-colors, default);
            outline: map-get($theme-colors, default) solid 1px;

            .arrow {
                visibility: visible;
                color: map-get($theme-colors, hover)
            }
        }

        &:disabled {
            background-color: map-get($theme-colors, disabled-bg);
            color: map-get($theme-colors, disabled-2);
            outline: none;
            cursor: not-allowed;
        }
    }


    .button .arrow {
        visibility: hidden;
        margin: 0 2em;
    }
}

@mixin inner-circle {
    content: "";
    position: absolute;
    border-radius: 50%;
}

// radio button style

.radio-group {
    display: flex;
    flex-direction: row;
    gap: 4em;

    label {

        .button--radio {
            appearance: none;
            width: 1.5em;
            height: 1.5em;
            position: relative;
            cursor: pointer;
            border-radius: 50%;
            border: map-get($theme-colors, default) solid 2px;
            vertical-align: middle;
            transition: background-color 0.1s ease;

            // inner-circle
            &::after {
                width: .70em;
                height: .70em;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background-color: map-get($theme-colors, font);

                @include inner-circle()
            }

            &:not(:checked) {
                background-color: map-get($theme-colors, font);

            }

            &:checked {
                background-color: map-get($theme-colors, default);
                outline: none;

            }

            &:hover {
                box-sizing: border-box;
                background-color: map-get($theme-colors, hover);
                color: map-get($theme-colors, default);
                outline: none;

                &::after {
                    background-color: map-get($theme-colors, default);
                }
            }

            &:focus-visible {
                @include focus-outline;

            }

            &.radio-disabled {
                cursor: not-allowed;
                background-color: map-get($theme-colors, font);
                outline: map-get($theme-colors, disabled-3) solid 1px;
                color: map-get($theme-colors, disabled-3);
                border: none;

                &::after {
                    @include inner-circle;
                    width: .70em;
                    height: .70em;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background-color: map-get($theme-colors, disabled-2);
                }
            }
        }
    }
}

//checkbox style   

@mixin defaultFilled {
    background-color: map-get($theme-colors, default);
}

@mixin boxOtherStyle {
    border: 1.5px solid currentColor;
    cursor: not-allowed;
}

@mixin hover--unchecked {
    &:hover {
        background-color: map-get($theme-colors, default-light);
        border: none;
    }

    &:hover+i {
        color: map-get($theme-colors, default);
    }
}

.checkbox-group {
    display: flex;
    flex-direction: row;

    [data-group="group2"] {
        background-color: map-get($theme-colors, background-alt);
    }

    .checkbox-group--sub {
        flex-basis: 30%;
        justify-content: center;
        padding: 1.2em 2em;
        border-radius: 5px;

        .label-checkbox {
            position: relative;
            display: flex;
            place-items: center;
            font-size: .85em;
            gap: .25em;

            i {
                position: absolute;
                place-items: center;
                top: 50%;
                left: 0%;
                transform: translate(130%, -100%); // transform: translateX(-100%);
                width: .5em;
                height: .5em;
                display: none;
            }
        }

        .checkbox {
            appearance: none;
            display: inline-block;
            width: 1.6em;
            height: 1.6em;
            position: relative;
            border-radius: 3px;
            border: 1.5px solid map-get($theme-colors, default);
            vertical-align: middle;
            cursor: pointer;
            background-color: map-get($theme-colors, font);

            &:not(:checked):not(.checkbox--disabled):not(.checkbox--error) {
                @include hover--unchecked;
            }

            &:checked:not(.checkbox--disabled):not(.checkbox--error) {
                @include defaultFilled;

                &:hover {
                    background-color: map-get($theme-colors, font);
                }

                &:hover+i {
                    color: map-get($theme-colors, default);
                }

            }
            &:focus-visible {
                @include focus-outline;
            }

            &:checked+i {
                color: map-get($theme-colors, font);

                &.fa-check {
                    display: inline-block;
                }

                &.fa-minus {
                    display: none;
                }

            }

        }

        .checkbox--disabled {
            @include boxOtherStyle;
            color: map-get($theme-colors, disabled-2);
            background-color: map-get($theme-colors, disabled-bg);

        }

        .checkbox--disabled+i {
            display: inline-block;
            color: map-get($theme-colors, disabled-2);
        }

        .checkbox--error {
            @include boxOtherStyle;
            color: map-get($theme-colors, error);
            background-color: map-get($theme-colors, error-bg);

            &:checked+i.fa-check {
                color: map-get($theme-colors, error-bg);
            }
        }

        .checkbox--error+i {
            display: inline-block;
            color: map-get($theme-colors, error);
        }


        //indeterminate

        $indeterminate-states: (
            "checkbox-item": (bg: default, minus: font),
            "checkbox--disabled": (bg: disabled-bg, minus: disabled-2),
            "checkbox--error": (bg:error-bg, minus: error)
        );

    @each $class, $state in $indeterminate-states {
        .#{$class}:indeterminate {
            background-color: map-get($theme-colors, map-get($state, bg));
        }

        .#{$class}:indeterminate~i {

            &.fa-check {
                display: none;
            }

            &.fa-minus {
                display: inline-block;
                color: map-get($theme-colors, map-get($state, minus));
            }
        }

    }
}
}

.toggle-group {
    margin-left: 2em;
    display: flex;
    gap: .75em;

    .toggle {
        position: relative;
        width: 2.5em;
        height: 1.4em;
        @include defaultFilled;
        border-radius: 25px;
        border: none;

        &::after {
            width: 1.1em;
            height: 1.1em;
            top: 50%;
            left: 50%;
            transform: translate(0%, -50%);
            background-color: map-get($theme-colors, font);

            @include inner-circle;
            transition: 0.08s ease;
        }

        &:hover:not(&:disabled) {
            @include hover--default;

            &::after {
                background-color: map-get($theme-colors, default);

            }
        }

        &:focus-visible {
            @include focus-outline;
        }

        &:disabled {
            cursor: not-allowed;
            background-color: map-get($theme-colors, disabled-1);

            &::after {
                transform: translate(-100%, -50%);
            }
        }

        &.toggle-off {
            @include hover--default;

            &::after {
                background-color: map-get($theme-colors, default);

                transform: translate(-100%, -50%);
            }
        }
    }
}

.button-group--master {
    .button-group--sub {
        display: flex;
        margin: 1.2em;

        button {
            padding: .5em .75em;
            border: none;
            border: 1px solid map-get($theme-colors, default);
            display: flex;
            text-align: center;

            &:first-child {
                border-radius: 5px 0 0 5px;
            }

            &:last-child {
                border-radius: 0 5px 5px 0;
            }

            &:hover {
                color: map-get($theme-colors, disabled-1);
                background-color: map-get($theme-colors, default-light);
                outline: none;
            }
        }

        i {
            margin-right: .2em;
            font-size: 1.5em;
        }

    }

    .default {
        color: map-get($theme-colors, default);
        background-color: map-get($theme-colors, font);
        outline: none;
    }

    .is-selected {
        color: map-get($theme-colors, font);
        background-color: map-get($theme-colors, default);
        outline: none;
    }

    :disabled {
        color: map-get($theme-colors, disabled-1);
        background-color: map-get($theme-colors, disabled-bg);
        outline: none;
        cursor: not-allowed
    }
}